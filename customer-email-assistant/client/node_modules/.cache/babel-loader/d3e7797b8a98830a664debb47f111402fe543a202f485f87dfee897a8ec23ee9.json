{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const emailApi = {\n  // Fetch emails from Gmail\n  fetchEmails: async (limit = 50) => {\n    const response = await api.get(`/emails?limit=${limit}`);\n    return response.data;\n  },\n  // Get email by ID\n  getEmail: async emailId => {\n    const response = await api.get(`/emails/${emailId}`);\n    return response.data;\n  },\n  // Classify email\n  classifyEmail: async emailId => {\n    const response = await api.post(`/emails/${emailId}/classify`);\n    return response.data;\n  },\n  // Generate reply\n  generateReply: async (emailId, context = {}) => {\n    const response = await api.post(`/emails/${emailId}/generate-reply`, context);\n    return response.data;\n  },\n  // Update email status\n  updateEmailStatus: async (emailId, status) => {\n    const response = await api.put(`/emails/${emailId}`, {\n      status\n    });\n    return response.data;\n  },\n  // Send reply\n  sendReply: async (emailId, replyContent) => {\n    const response = await api.post(`/emails/${emailId}/send-reply`, {\n      content: replyContent\n    });\n    return response.data;\n  },\n  // Get email statistics\n  getStats: async () => {\n    const response = await api.get('/stats');\n    return response.data;\n  },\n  // Sync emails (manual refresh)\n  syncEmails: async () => {\n    const response = await api.post('/sync');\n    return response.data;\n  }\n};\nexport default emailApi;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","emailApi","fetchEmails","limit","response","get","data","getEmail","emailId","classifyEmail","post","generateReply","context","updateEmailStatus","status","put","sendReply","replyContent","content","getStats","syncEmails"],"sources":["D:/Windows_user/Documents/GitHub/git_study/customer-email-assistant/client/src/api/emailApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const emailApi = {\r\n  // Fetch emails from Gmail\r\n  fetchEmails: async (limit = 50) => {\r\n    const response = await api.get(`/emails?limit=${limit}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get email by ID\r\n  getEmail: async (emailId) => {\r\n    const response = await api.get(`/emails/${emailId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Classify email\r\n  classifyEmail: async (emailId) => {\r\n    const response = await api.post(`/emails/${emailId}/classify`);\r\n    return response.data;\r\n  },\r\n\r\n  // Generate reply\r\n  generateReply: async (emailId, context = {}) => {\r\n    const response = await api.post(`/emails/${emailId}/generate-reply`, context);\r\n    return response.data;\r\n  },\r\n\r\n  // Update email status\r\n  updateEmailStatus: async (emailId, status) => {\r\n    const response = await api.put(`/emails/${emailId}`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Send reply\r\n  sendReply: async (emailId, replyContent) => {\r\n    const response = await api.post(`/emails/${emailId}/send-reply`, {\r\n      content: replyContent\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get email statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Sync emails (manual refresh)\r\n  syncEmails: async () => {\r\n    const response = await api.post('/sync');\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default emailApi;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACAC,WAAW,EAAE,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,iBAAiBF,KAAK,EAAE,CAAC;IACxD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,OAAO,IAAK;IAC3B,MAAMJ,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,WAAWG,OAAO,EAAE,CAAC;IACpD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,aAAa,EAAE,MAAOD,OAAO,IAAK;IAChC,MAAMJ,QAAQ,GAAG,MAAMP,GAAG,CAACa,IAAI,CAAC,WAAWF,OAAO,WAAW,CAAC;IAC9D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,aAAa,EAAE,MAAAA,CAAOH,OAAO,EAAEI,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9C,MAAMR,QAAQ,GAAG,MAAMP,GAAG,CAACa,IAAI,CAAC,WAAWF,OAAO,iBAAiB,EAAEI,OAAO,CAAC;IAC7E,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAO,iBAAiB,EAAE,MAAAA,CAAOL,OAAO,EAAEM,MAAM,KAAK;IAC5C,MAAMV,QAAQ,GAAG,MAAMP,GAAG,CAACkB,GAAG,CAAC,WAAWP,OAAO,EAAE,EAAE;MAAEM;IAAO,CAAC,CAAC;IAChE,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAU,SAAS,EAAE,MAAAA,CAAOR,OAAO,EAAES,YAAY,KAAK;IAC1C,MAAMb,QAAQ,GAAG,MAAMP,GAAG,CAACa,IAAI,CAAC,WAAWF,OAAO,aAAa,EAAE;MAC/DU,OAAO,EAAED;IACX,CAAC,CAAC;IACF,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAa,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMf,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAc,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMhB,QAAQ,GAAG,MAAMP,GAAG,CAACa,IAAI,CAAC,OAAO,CAAC;IACxC,OAAON,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeL,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}